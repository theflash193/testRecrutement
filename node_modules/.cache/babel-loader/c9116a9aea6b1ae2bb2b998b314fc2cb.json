{"ast":null,"code":"// return the total reduction by applying the minus offer\nconst applyMinusReduction = (totalPrize, offer) => {\n  return totalPrize - offer.value;\n}; // return the total reduction by applying the percentage offer\n\n\nconst applyPercentageReduction = (totalPrize, offer) => {\n  return totalPrize - totalPrize * offer.value / 100;\n}; // return the total reduction by applying the slice offer\n\n\nconst applySliceReduction = (totalPrize, offer) => {\n  let slice;\n  slice = totalPrize / offer.sliceValue >> 0;\n  return totalPrize - slice * offer.value;\n}; // return the best offer\n\n\nconst getBestOffer = (prize, offers) => {\n  // create a array of all reduction then sort it to find the best offer\n  allReductions = offers.map(offer => {\n    switch (offer.type) {\n      case \"minus\":\n        return applyMinusReduction(prize, offer);\n\n      case \"percentage\":\n        return applyPercentageReduction(prize, offer);\n\n      case \"slice\":\n        return applySliceReduction(prize, offer);\n    }\n  });\n  allReductions.sort((a, b) => a > b);\n  return allReductions[0];\n};\n\nmodule.exports = {\n  applyMinusReduction,\n  applyPercentageReduction,\n  applySliceReduction,\n  getBestOffer\n};","map":{"version":3,"sources":["C:/Users/gordon/Desktop/testRecrutement/src/utils/reductions.js"],"names":["applyMinusReduction","totalPrize","offer","value","applyPercentageReduction","applySliceReduction","slice","sliceValue","getBestOffer","prize","offers","allReductions","map","type","sort","a","b","module","exports"],"mappings":"AAAA;AACA,MAAMA,mBAAmB,GAAG,CAACC,UAAD,EAAaC,KAAb,KAAuB;AAC/C,SAAOD,UAAU,GAAGC,KAAK,CAACC,KAA1B;AACH,CAFD,C,CAIA;;;AACA,MAAMC,wBAAwB,GAAG,CAACH,UAAD,EAAaC,KAAb,KAAuB;AACpD,SAAOD,UAAU,GAAKA,UAAU,GAAGC,KAAK,CAACC,KAApB,GAA6B,GAAlD;AACH,CAFD,C,CAIA;;;AACA,MAAME,mBAAmB,GAAG,CAACJ,UAAD,EAAaC,KAAb,KAAuB;AAC/C,MAAII,KAAJ;AAEAA,EAAAA,KAAK,GAAIL,UAAU,GAAGC,KAAK,CAACK,UAApB,IAAmC,CAA3C;AACA,SAAQN,UAAU,GAAIK,KAAK,GAAGJ,KAAK,CAACC,KAApC;AACH,CALD,C,CAOA;;;AACA,MAAMK,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC;AACAC,EAAAA,aAAa,GAAGD,MAAM,CAACE,GAAP,CAAYV,KAAD,IAAW;AAClC,YAAQA,KAAK,CAACW,IAAd;AACI,WAAK,OAAL;AACI,eAAOb,mBAAmB,CAACS,KAAD,EAAQP,KAAR,CAA1B;;AACJ,WAAK,YAAL;AACI,eAAOE,wBAAwB,CAACK,KAAD,EAAQP,KAAR,CAA/B;;AACJ,WAAK,OAAL;AACI,eAAOG,mBAAmB,CAACI,KAAD,EAAQP,KAAR,CAA1B;AANR;AAQF,GATc,CAAhB;AAUCS,EAAAA,aAAa,CAACG,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC;AACD,SAAOL,aAAa,CAAC,CAAD,CAApB;AACH,CAdD;;AAgBAM,MAAM,CAACC,OAAP,GAAiB;AAAClB,EAAAA,mBAAD;AAAsBI,EAAAA,wBAAtB;AAAgDC,EAAAA,mBAAhD;AAAqEG,EAAAA;AAArE,CAAjB","sourcesContent":["// return the total reduction by applying the minus offer\r\nconst applyMinusReduction = (totalPrize, offer) => { \r\n    return totalPrize - offer.value;\r\n}\r\n\r\n// return the total reduction by applying the percentage offer\r\nconst applyPercentageReduction = (totalPrize, offer) => {\r\n    return totalPrize - ((totalPrize * offer.value) / 100);\r\n}\r\n\r\n// return the total reduction by applying the slice offer\r\nconst applySliceReduction = (totalPrize, offer) => {\r\n    let slice;\r\n\r\n    slice = (totalPrize / offer.sliceValue) >> 0;\r\n    return  totalPrize - (slice * offer.value);\r\n}\r\n\r\n// return the best offer\r\nconst getBestOffer = (prize, offers) => {\r\n    // create a array of all reduction then sort it to find the best offer\r\n    allReductions = offers.map((offer) => {\r\n        switch (offer.type) {\r\n            case \"minus\":\r\n                return applyMinusReduction(prize, offer);\r\n            case \"percentage\":\r\n                return applyPercentageReduction(prize, offer);\r\n            case \"slice\":\r\n                return applySliceReduction(prize, offer);\r\n        }\r\n     });\r\n     allReductions.sort((a, b) => a > b);\r\n    return allReductions[0];\r\n}\r\n\r\nmodule.exports = {applyMinusReduction, applyPercentageReduction, applySliceReduction, getBestOffer};\r\n"]},"metadata":{},"sourceType":"module"}