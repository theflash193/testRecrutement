{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar keys = require('object-keys');\n\nvar inspect = require('object-inspect');\n\nvar ES2017 = require('./es2017');\n\nvar assign = require('./helpers/assign');\n\nvar forEach = require('./helpers/forEach');\n\nvar callBind = require('./helpers/callBind');\n\nvar every = require('./helpers/every');\n\nvar isPrefixOf = require('./helpers/isPrefixOf');\n\nvar $String = GetIntrinsic('%String%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('./helpers/callBound');\n\nvar regexTester = require('./helpers/regexTester');\n\nvar $isNaN = require('./helpers/isNaN');\n\nvar $SymbolValueOf = callBound('Symbol.prototype.valueOf', true); // var $charAt = callBound('String.prototype.charAt');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar $indexOf = callBound('String.prototype.indexOf');\nvar $parseInt = parseInt;\nvar isDigit = regexTester(/^[0-9]$/);\nvar $PromiseResolve = callBound('Promise.resolve', true);\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\nvar $pushApply = callBind.apply(GetIntrinsic('%Array.prototype.push%'));\nvar $gOPS = $SymbolValueOf ? GetIntrinsic('%Object.getOwnPropertySymbols%') : null;\n\nvar padTimeComponent = function padTimeComponent(c, count) {\n  return $strSlice('00' + c, -(count || 2));\n};\n\nvar weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nvar OwnPropertyKeys = function OwnPropertyKeys(ES, source) {\n  var ownKeys = keys(source);\n\n  if ($gOPS) {\n    $pushApply(ownKeys, $gOPS(source));\n  }\n\n  return ownKeys;\n};\n\nvar ES2018 = assign(assign({}, ES2017), {\n  EnumerableOwnPropertyNames: ES2017.EnumerableOwnProperties,\n  // https://ecma-international.org/ecma-262/9.0/#sec-thissymbolvalue\n  thisSymbolValue: function thisSymbolValue(value) {\n    if (!$SymbolValueOf) {\n      throw new SyntaxError('Symbols are not supported; thisSymbolValue requires that `value` be a Symbol or a Symbol object');\n    }\n\n    if (this.Type(value) === 'Symbol') {\n      return value;\n    }\n\n    return $SymbolValueOf(value);\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-isstringprefix\n  IsStringPrefix: function IsStringPrefix(p, q) {\n    if (this.Type(p) !== 'String') {\n      throw new TypeError('Assertion failed: \"p\" must be a String');\n    }\n\n    if (this.Type(q) !== 'String') {\n      throw new TypeError('Assertion failed: \"q\" must be a String');\n    }\n\n    return isPrefixOf(p, q);\n    /*\n    if (p === q || p === '') {\n    \treturn true;\n    }\n    \tvar pLength = p.length;\n    var qLength = q.length;\n    if (pLength >= qLength) {\n    \treturn false;\n    }\n    \t// assert: pLength < qLength\n    \tfor (var i = 0; i < pLength; i += 1) {\n    \tif ($charAt(p, i) !== $charAt(q, i)) {\n    \t\treturn false;\n    \t}\n    }\n    return true;\n    */\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-tostring-applied-to-the-number-type\n  NumberToString: function NumberToString(m) {\n    if (this.Type(m) !== 'Number') {\n      throw new TypeError('Assertion failed: \"m\" must be a String');\n    }\n\n    return $String(m);\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-copydataproperties\n  CopyDataProperties: function CopyDataProperties(target, source, excludedItems) {\n    if (this.Type(target) !== 'Object') {\n      throw new TypeError('Assertion failed: \"target\" must be an Object');\n    }\n\n    if (!this.IsArray(excludedItems)) {\n      throw new TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n    }\n\n    for (var i = 0; i < excludedItems.length; i += 1) {\n      if (!this.IsPropertyKey(excludedItems[i])) {\n        throw new TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n      }\n    }\n\n    if (typeof source === 'undefined' || source === null) {\n      return target;\n    }\n\n    var ES = this;\n    var fromObj = ES.ToObject(source);\n    var sourceKeys = OwnPropertyKeys(ES, fromObj);\n    forEach(sourceKeys, function (nextKey) {\n      var excluded = false;\n      forEach(excludedItems, function (e) {\n        if (ES.SameValue(e, nextKey) === true) {\n          excluded = true;\n        }\n      });\n      var enumerable = $isEnumerable(fromObj, nextKey) || // this is to handle string keys being non-enumerable in older engines\n      typeof source === 'string' && nextKey >= 0 && ES.IsInteger(ES.ToNumber(nextKey));\n\n      if (excluded === false && enumerable) {\n        var propValue = ES.Get(fromObj, nextKey);\n        ES.CreateDataProperty(target, nextKey, propValue);\n      }\n    });\n    return target;\n  },\n  // https://ecma-international.org/ecma-262/9.0/#sec-promise-resolve\n  PromiseResolve: function PromiseResolve(C, x) {\n    if (!$PromiseResolve) {\n      throw new SyntaxError('This environment does not support Promises.');\n    }\n\n    return $PromiseResolve(C, x);\n  },\n  // http://www.ecma-international.org/ecma-262/9.0/#sec-getsubstitution\n  // eslint-disable-next-line max-statements, max-params, max-lines-per-function\n  GetSubstitution: function GetSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    if (this.Type(matched) !== 'String') {\n      throw new $TypeError('Assertion failed: `matched` must be a String');\n    }\n\n    var matchLength = matched.length;\n\n    if (this.Type(str) !== 'String') {\n      throw new $TypeError('Assertion failed: `str` must be a String');\n    }\n\n    var stringLength = str.length;\n\n    if (!this.IsInteger(position) || position < 0 || position > stringLength) {\n      throw new $TypeError('Assertion failed: `position` must be a nonnegative integer, and less than or equal to the length of `string`, got ' + inspect(position));\n    }\n\n    var ES = this;\n\n    var isStringOrHole = function (capture, index, arr) {\n      return ES.Type(capture) === 'String' || !(index in arr);\n    };\n\n    if (!this.IsArray(captures) || !every(captures, isStringOrHole)) {\n      throw new $TypeError('Assertion failed: `captures` must be a List of Strings, got ' + inspect(captures));\n    }\n\n    if (this.Type(replacement) !== 'String') {\n      throw new $TypeError('Assertion failed: `replacement` must be a String');\n    }\n\n    var tailPos = position + matchLength;\n    var m = captures.length;\n\n    if (this.Type(namedCaptures) !== 'Undefined') {\n      namedCaptures = this.ToObject(namedCaptures); // eslint-disable-line no-param-reassign\n    }\n\n    var result = '';\n\n    for (var i = 0; i < replacement.length; i += 1) {\n      // if this is a $, and it's not the end of the replacement\n      var current = replacement[i];\n      var isLast = i + 1 >= replacement.length;\n      var nextIsLast = i + 2 >= replacement.length;\n\n      if (current === '$' && !isLast) {\n        var next = replacement[i + 1];\n\n        if (next === '$') {\n          result += '$';\n          i += 1;\n        } else if (next === '&') {\n          result += matched;\n          i += 1;\n        } else if (next === '`') {\n          result += position === 0 ? '' : $strSlice(str, 0, position - 1);\n          i += 1;\n        } else if (next === \"'\") {\n          result += tailPos >= stringLength ? '' : $strSlice(str, tailPos);\n          i += 1;\n        } else {\n          var nextNext = nextIsLast ? null : replacement[i + 2];\n\n          if (isDigit(next) && next !== '0' && (nextIsLast || !isDigit(nextNext))) {\n            // $1 through $9, and not followed by a digit\n            var n = $parseInt(next, 10); // if (n > m, impl-defined)\n\n            result += n <= m && this.Type(captures[n - 1]) === 'Undefined' ? '' : captures[n - 1];\n            i += 1;\n          } else if (isDigit(next) && (nextIsLast || isDigit(nextNext))) {\n            // $00 through $99\n            var nn = next + nextNext;\n            var nnI = $parseInt(nn, 10) - 1; // if nn === '00' or nn > m, impl-defined\n\n            result += nn <= m && this.Type(captures[nnI]) === 'Undefined' ? '' : captures[nnI];\n            i += 2;\n          } else if (next === '<') {\n            // eslint-disable-next-line max-depth\n            if (this.Type(namedCaptures) === 'Undefined') {\n              result += '$<';\n              i += 2;\n            } else {\n              var endIndex = $indexOf(replacement, '>', i); // eslint-disable-next-line max-depth\n\n              if (endIndex > -1) {\n                var groupName = $strSlice(replacement, i, endIndex);\n                var capture = this.Get(namedCaptures, groupName); // eslint-disable-next-line max-depth\n\n                if (this.Type(capture) !== 'Undefined') {\n                  result += this.ToString(capture);\n                }\n\n                i += '$<' + groupName + '>'.length;\n              }\n            }\n          } else {\n            result += '$';\n          }\n        }\n      } else {\n        // the final $, or else not a $\n        result += replacement[i];\n      }\n    }\n\n    return result;\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-datestring\n  DateString: function DateString(tv) {\n    if (this.Type(tv) !== 'Number' || $isNaN(tv)) {\n      throw new $TypeError('Assertion failed: `tv` must be a non-NaN Number');\n    }\n\n    var weekday = weekdays[this.WeekDay(tv)];\n    var month = months[this.MonthFromTime(tv)];\n    var day = padTimeComponent(this.DateFromTime(tv));\n    var year = padTimeComponent(this.YearFromTime(tv), 4);\n    return weekday + '\\x20' + month + '\\x20' + day + '\\x20' + year;\n  },\n  // https://www.ecma-international.org/ecma-262/9.0/#sec-timestring\n  TimeString: function TimeString(tv) {\n    if (this.Type(tv) !== 'Number' || $isNaN(tv)) {\n      throw new $TypeError('Assertion failed: `tv` must be a non-NaN Number');\n    }\n\n    var hour = this.HourFromTime(tv);\n    var minute = this.MinFromTime(tv);\n    var second = this.SecFromTime(tv);\n    return padTimeComponent(hour) + ':' + padTimeComponent(minute) + ':' + padTimeComponent(second) + '\\x20GMT';\n  }\n});\ndelete ES2018.EnumerableOwnProperties; // replaced with EnumerableOwnPropertyNames\n\ndelete ES2018.IsPropertyDescriptor; // not an actual abstract operation\n\nmodule.exports = ES2018;","map":{"version":3,"sources":["C:/Users/gordon/Desktop/testRecrutement/node_modules/es-abstract/es2018.js"],"names":["GetIntrinsic","require","keys","inspect","ES2017","assign","forEach","callBind","every","isPrefixOf","$String","$TypeError","callBound","regexTester","$isNaN","$SymbolValueOf","$strSlice","$indexOf","$parseInt","parseInt","isDigit","$PromiseResolve","$isEnumerable","$pushApply","apply","$gOPS","padTimeComponent","c","count","weekdays","months","OwnPropertyKeys","ES","source","ownKeys","ES2018","EnumerableOwnPropertyNames","EnumerableOwnProperties","thisSymbolValue","value","SyntaxError","Type","IsStringPrefix","p","q","TypeError","NumberToString","m","CopyDataProperties","target","excludedItems","IsArray","i","length","IsPropertyKey","fromObj","ToObject","sourceKeys","nextKey","excluded","e","SameValue","enumerable","IsInteger","ToNumber","propValue","Get","CreateDataProperty","PromiseResolve","C","x","GetSubstitution","matched","str","position","captures","namedCaptures","replacement","matchLength","stringLength","isStringOrHole","capture","index","arr","tailPos","result","current","isLast","nextIsLast","next","nextNext","n","nn","nnI","endIndex","groupName","ToString","DateString","tv","weekday","WeekDay","month","MonthFromTime","day","DateFromTime","year","YearFromTime","TimeString","hour","HourFromTime","minute","MinFromTime","second","SecFromTime","IsPropertyDescriptor","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('./GetIntrinsic');\n\nvar keys = require('object-keys');\nvar inspect = require('object-inspect');\n\nvar ES2017 = require('./es2017');\nvar assign = require('./helpers/assign');\nvar forEach = require('./helpers/forEach');\nvar callBind = require('./helpers/callBind');\nvar every = require('./helpers/every');\nvar isPrefixOf = require('./helpers/isPrefixOf');\n\nvar $String = GetIntrinsic('%String%');\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar callBound = require('./helpers/callBound');\nvar regexTester = require('./helpers/regexTester');\nvar $isNaN = require('./helpers/isNaN');\n\nvar $SymbolValueOf = callBound('Symbol.prototype.valueOf', true);\n// var $charAt = callBound('String.prototype.charAt');\nvar $strSlice = callBound('String.prototype.slice');\nvar $indexOf = callBound('String.prototype.indexOf');\nvar $parseInt = parseInt;\n\nvar isDigit = regexTester(/^[0-9]$/);\n\nvar $PromiseResolve = callBound('Promise.resolve', true);\n\nvar $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');\nvar $pushApply = callBind.apply(GetIntrinsic('%Array.prototype.push%'));\nvar $gOPS = $SymbolValueOf ? GetIntrinsic('%Object.getOwnPropertySymbols%') : null;\n\nvar padTimeComponent = function padTimeComponent(c, count) {\n\treturn $strSlice('00' + c, -(count || 2));\n};\n\nvar weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nvar OwnPropertyKeys = function OwnPropertyKeys(ES, source) {\n\tvar ownKeys = keys(source);\n\tif ($gOPS) {\n\t\t$pushApply(ownKeys, $gOPS(source));\n\t}\n\treturn ownKeys;\n};\n\nvar ES2018 = assign(assign({}, ES2017), {\n\tEnumerableOwnPropertyNames: ES2017.EnumerableOwnProperties,\n\n\t// https://ecma-international.org/ecma-262/9.0/#sec-thissymbolvalue\n\tthisSymbolValue: function thisSymbolValue(value) {\n\t\tif (!$SymbolValueOf) {\n\t\t\tthrow new SyntaxError('Symbols are not supported; thisSymbolValue requires that `value` be a Symbol or a Symbol object');\n\t\t}\n\t\tif (this.Type(value) === 'Symbol') {\n\t\t\treturn value;\n\t\t}\n\t\treturn $SymbolValueOf(value);\n\t},\n\n\t// https://www.ecma-international.org/ecma-262/9.0/#sec-isstringprefix\n\tIsStringPrefix: function IsStringPrefix(p, q) {\n\t\tif (this.Type(p) !== 'String') {\n\t\t\tthrow new TypeError('Assertion failed: \"p\" must be a String');\n\t\t}\n\n\t\tif (this.Type(q) !== 'String') {\n\t\t\tthrow new TypeError('Assertion failed: \"q\" must be a String');\n\t\t}\n\n\t\treturn isPrefixOf(p, q);\n\t\t/*\n\t\tif (p === q || p === '') {\n\t\t\treturn true;\n\t\t}\n\n\t\tvar pLength = p.length;\n\t\tvar qLength = q.length;\n\t\tif (pLength >= qLength) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// assert: pLength < qLength\n\n\t\tfor (var i = 0; i < pLength; i += 1) {\n\t\t\tif ($charAt(p, i) !== $charAt(q, i)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t\t*/\n\t},\n\n\t// https://www.ecma-international.org/ecma-262/9.0/#sec-tostring-applied-to-the-number-type\n\tNumberToString: function NumberToString(m) {\n\t\tif (this.Type(m) !== 'Number') {\n\t\t\tthrow new TypeError('Assertion failed: \"m\" must be a String');\n\t\t}\n\n\t\treturn $String(m);\n\t},\n\n\t// https://www.ecma-international.org/ecma-262/9.0/#sec-copydataproperties\n\tCopyDataProperties: function CopyDataProperties(target, source, excludedItems) {\n\t\tif (this.Type(target) !== 'Object') {\n\t\t\tthrow new TypeError('Assertion failed: \"target\" must be an Object');\n\t\t}\n\n\t\tif (!this.IsArray(excludedItems)) {\n\t\t\tthrow new TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n\t\t}\n\t\tfor (var i = 0; i < excludedItems.length; i += 1) {\n\t\t\tif (!this.IsPropertyKey(excludedItems[i])) {\n\t\t\t\tthrow new TypeError('Assertion failed: \"excludedItems\" must be a List of Property Keys');\n\t\t\t}\n\t\t}\n\n\t\tif (typeof source === 'undefined' || source === null) {\n\t\t\treturn target;\n\t\t}\n\n\t\tvar ES = this;\n\n\t\tvar fromObj = ES.ToObject(source);\n\n\t\tvar sourceKeys = OwnPropertyKeys(ES, fromObj);\n\t\tforEach(sourceKeys, function (nextKey) {\n\t\t\tvar excluded = false;\n\n\t\t\tforEach(excludedItems, function (e) {\n\t\t\t\tif (ES.SameValue(e, nextKey) === true) {\n\t\t\t\t\texcluded = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar enumerable = $isEnumerable(fromObj, nextKey) || (\n\t\t\t\t// this is to handle string keys being non-enumerable in older engines\n\t\t\t\ttypeof source === 'string'\n\t\t\t\t&& nextKey >= 0\n\t\t\t\t&& ES.IsInteger(ES.ToNumber(nextKey))\n\t\t\t);\n\t\t\tif (excluded === false && enumerable) {\n\t\t\t\tvar propValue = ES.Get(fromObj, nextKey);\n\t\t\t\tES.CreateDataProperty(target, nextKey, propValue);\n\t\t\t}\n\t\t});\n\n\t\treturn target;\n\t},\n\n\t// https://ecma-international.org/ecma-262/9.0/#sec-promise-resolve\n\tPromiseResolve: function PromiseResolve(C, x) {\n\t\tif (!$PromiseResolve) {\n\t\t\tthrow new SyntaxError('This environment does not support Promises.');\n\t\t}\n\t\treturn $PromiseResolve(C, x);\n\t},\n\n\t// http://www.ecma-international.org/ecma-262/9.0/#sec-getsubstitution\n\t// eslint-disable-next-line max-statements, max-params, max-lines-per-function\n\tGetSubstitution: function GetSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n\t\tif (this.Type(matched) !== 'String') {\n\t\t\tthrow new $TypeError('Assertion failed: `matched` must be a String');\n\t\t}\n\t\tvar matchLength = matched.length;\n\n\t\tif (this.Type(str) !== 'String') {\n\t\t\tthrow new $TypeError('Assertion failed: `str` must be a String');\n\t\t}\n\t\tvar stringLength = str.length;\n\n\t\tif (!this.IsInteger(position) || position < 0 || position > stringLength) {\n\t\t\tthrow new $TypeError('Assertion failed: `position` must be a nonnegative integer, and less than or equal to the length of `string`, got ' + inspect(position));\n\t\t}\n\n\t\tvar ES = this;\n\t\tvar isStringOrHole = function (capture, index, arr) { return ES.Type(capture) === 'String' || !(index in arr); };\n\t\tif (!this.IsArray(captures) || !every(captures, isStringOrHole)) {\n\t\t\tthrow new $TypeError('Assertion failed: `captures` must be a List of Strings, got ' + inspect(captures));\n\t\t}\n\n\t\tif (this.Type(replacement) !== 'String') {\n\t\t\tthrow new $TypeError('Assertion failed: `replacement` must be a String');\n\t\t}\n\n\t\tvar tailPos = position + matchLength;\n\t\tvar m = captures.length;\n\t\tif (this.Type(namedCaptures) !== 'Undefined') {\n\t\t\tnamedCaptures = this.ToObject(namedCaptures); // eslint-disable-line no-param-reassign\n\t\t}\n\n\t\tvar result = '';\n\t\tfor (var i = 0; i < replacement.length; i += 1) {\n\t\t\t// if this is a $, and it's not the end of the replacement\n\t\t\tvar current = replacement[i];\n\t\t\tvar isLast = (i + 1) >= replacement.length;\n\t\t\tvar nextIsLast = (i + 2) >= replacement.length;\n\t\t\tif (current === '$' && !isLast) {\n\t\t\t\tvar next = replacement[i + 1];\n\t\t\t\tif (next === '$') {\n\t\t\t\t\tresult += '$';\n\t\t\t\t\ti += 1;\n\t\t\t\t} else if (next === '&') {\n\t\t\t\t\tresult += matched;\n\t\t\t\t\ti += 1;\n\t\t\t\t} else if (next === '`') {\n\t\t\t\t\tresult += position === 0 ? '' : $strSlice(str, 0, position - 1);\n\t\t\t\t\ti += 1;\n\t\t\t\t} else if (next === \"'\") {\n\t\t\t\t\tresult += tailPos >= stringLength ? '' : $strSlice(str, tailPos);\n\t\t\t\t\ti += 1;\n\t\t\t\t} else {\n\t\t\t\t\tvar nextNext = nextIsLast ? null : replacement[i + 2];\n\t\t\t\t\tif (isDigit(next) && next !== '0' && (nextIsLast || !isDigit(nextNext))) {\n\t\t\t\t\t\t// $1 through $9, and not followed by a digit\n\t\t\t\t\t\tvar n = $parseInt(next, 10);\n\t\t\t\t\t\t// if (n > m, impl-defined)\n\t\t\t\t\t\tresult += (n <= m && this.Type(captures[n - 1]) === 'Undefined') ? '' : captures[n - 1];\n\t\t\t\t\t\ti += 1;\n\t\t\t\t\t} else if (isDigit(next) && (nextIsLast || isDigit(nextNext))) {\n\t\t\t\t\t\t// $00 through $99\n\t\t\t\t\t\tvar nn = next + nextNext;\n\t\t\t\t\t\tvar nnI = $parseInt(nn, 10) - 1;\n\t\t\t\t\t\t// if nn === '00' or nn > m, impl-defined\n\t\t\t\t\t\tresult += (nn <= m && this.Type(captures[nnI]) === 'Undefined') ? '' : captures[nnI];\n\t\t\t\t\t\ti += 2;\n\t\t\t\t\t} else if (next === '<') {\n\t\t\t\t\t\t// eslint-disable-next-line max-depth\n\t\t\t\t\t\tif (this.Type(namedCaptures) === 'Undefined') {\n\t\t\t\t\t\t\tresult += '$<';\n\t\t\t\t\t\t\ti += 2;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar endIndex = $indexOf(replacement, '>', i);\n\t\t\t\t\t\t\t// eslint-disable-next-line max-depth\n\t\t\t\t\t\t\tif (endIndex > -1) {\n\t\t\t\t\t\t\t\tvar groupName = $strSlice(replacement, i, endIndex);\n\t\t\t\t\t\t\t\tvar capture = this.Get(namedCaptures, groupName);\n\t\t\t\t\t\t\t\t// eslint-disable-next-line max-depth\n\t\t\t\t\t\t\t\tif (this.Type(capture) !== 'Undefined') {\n\t\t\t\t\t\t\t\t\tresult += this.ToString(capture);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ti += '$<' + groupName + '>'.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult += '$';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// the final $, or else not a $\n\t\t\t\tresult += replacement[i];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\n\t// https://www.ecma-international.org/ecma-262/9.0/#sec-datestring\n\tDateString: function DateString(tv) {\n\t\tif (this.Type(tv) !== 'Number' || $isNaN(tv)) {\n\t\t\tthrow new $TypeError('Assertion failed: `tv` must be a non-NaN Number');\n\t\t}\n\t\tvar weekday = weekdays[this.WeekDay(tv)];\n\t\tvar month = months[this.MonthFromTime(tv)];\n\t\tvar day = padTimeComponent(this.DateFromTime(tv));\n\t\tvar year = padTimeComponent(this.YearFromTime(tv), 4);\n\t\treturn weekday + '\\x20' + month + '\\x20' + day + '\\x20' + year;\n\t},\n\n\t// https://www.ecma-international.org/ecma-262/9.0/#sec-timestring\n\tTimeString: function TimeString(tv) {\n\t\tif (this.Type(tv) !== 'Number' || $isNaN(tv)) {\n\t\t\tthrow new $TypeError('Assertion failed: `tv` must be a non-NaN Number');\n\t\t}\n\t\tvar hour = this.HourFromTime(tv);\n\t\tvar minute = this.MinFromTime(tv);\n\t\tvar second = this.SecFromTime(tv);\n\t\treturn padTimeComponent(hour) + ':' + padTimeComponent(minute) + ':' + padTimeComponent(second) + '\\x20GMT';\n\t}\n});\n\ndelete ES2018.EnumerableOwnProperties; // replaced with EnumerableOwnPropertyNames\n\ndelete ES2018.IsPropertyDescriptor; // not an actual abstract operation\n\nmodule.exports = ES2018;\n"]},"metadata":{},"sourceType":"script"}