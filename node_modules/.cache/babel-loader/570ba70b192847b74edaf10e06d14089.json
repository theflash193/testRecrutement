{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar callBound = require('./callBound');\n\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar symToStr = callBound('Symbol.prototype.toString', true);\n\nvar getInferredName = require('./getInferredName');\n\nmodule.exports = function getSymbolDescription(symbol) {\n  if (!symToStr) {\n    throw new $SyntaxError('Symbols are not supported in this environment');\n  }\n\n  var str = symToStr(symbol); // will throw if not a symbol\n\n  if (getInferredName) {\n    var name = getInferredName(symbol);\n\n    if (name === '') {\n      return;\n    } // eslint-disable-next-line consistent-return\n\n\n    return name.slice(1, -1); // name.slice('['.length, -']'.length);\n  }\n\n  var desc = str.slice(7, -1); // str.slice('Symbol('.length, -')'.length);\n\n  if (desc) {\n    // eslint-disable-next-line consistent-return\n    return desc;\n  }\n};","map":{"version":3,"sources":["C:/Users/gordon/Desktop/testRecrutement/node_modules/es-abstract/helpers/getSymbolDescription.js"],"names":["GetIntrinsic","require","callBound","$SyntaxError","symToStr","getInferredName","module","exports","getSymbolDescription","symbol","str","name","slice","desc"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIE,YAAY,GAAGH,YAAY,CAAC,eAAD,CAA/B;AACA,IAAII,QAAQ,GAAGF,SAAS,CAAC,2BAAD,EAA8B,IAA9B,CAAxB;;AAEA,IAAIG,eAAe,GAAGJ,OAAO,CAAC,mBAAD,CAA7B;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AACtD,MAAI,CAACL,QAAL,EAAe;AACd,UAAM,IAAID,YAAJ,CAAiB,+CAAjB,CAAN;AACA;;AACD,MAAIO,GAAG,GAAGN,QAAQ,CAACK,MAAD,CAAlB,CAJsD,CAI1B;;AAE5B,MAAIJ,eAAJ,EAAqB;AACpB,QAAIM,IAAI,GAAGN,eAAe,CAACI,MAAD,CAA1B;;AACA,QAAIE,IAAI,KAAK,EAAb,EAAiB;AAAE;AAAS,KAFR,CAGpB;;;AACA,WAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP,CAJoB,CAIM;AAC1B;;AAED,MAAIC,IAAI,GAAGH,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAX,CAbsD,CAazB;;AAC7B,MAAIC,IAAJ,EAAU;AACT;AACA,WAAOA,IAAP;AACA;AACD,CAlBD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar callBound = require('./callBound');\n\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar symToStr = callBound('Symbol.prototype.toString', true);\n\nvar getInferredName = require('./getInferredName');\n\nmodule.exports = function getSymbolDescription(symbol) {\n\tif (!symToStr) {\n\t\tthrow new $SyntaxError('Symbols are not supported in this environment');\n\t}\n\tvar str = symToStr(symbol); // will throw if not a symbol\n\n\tif (getInferredName) {\n\t\tvar name = getInferredName(symbol);\n\t\tif (name === '') { return; }\n\t\t// eslint-disable-next-line consistent-return\n\t\treturn name.slice(1, -1); // name.slice('['.length, -']'.length);\n\t}\n\n\tvar desc = str.slice(7, -1); // str.slice('Symbol('.length, -')'.length);\n\tif (desc) {\n\t\t// eslint-disable-next-line consistent-return\n\t\treturn desc;\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}