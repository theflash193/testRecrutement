{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gordon\\\\Desktop\\\\testRecrutement\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise-middleware'; // let store = createStore();\n// const  = () => { \n// }\n\nconst increment = () => {\n  return {\n    type: 'INCREMENT'\n  };\n};\n\nconst books = () => {\n  return {\n    type: 'INCREMENT',\n    pa\n  };\n};\n\nconst initialState = {\n  books: {},\n  filterBooks: {},\n  isLoaded: false,\n  error: false\n};\n\nconst counter = (state = 0, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return state + 1;\n\n    default:\n      return state;\n  }\n};\n\nconst book = (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(book, applyMiddleware(promise));\nstore.subscribe(() => console.log(store.getState()));\nconsole.log(store.getState()); // store.dispatch(increment());\n// store.dispatch(increment());\n// store.dispatch(increment());\n// store.dispatch(increment());              \n// store.dispatch(increment());\n// store.dispatch(increment());\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/Users/gordon/Desktop/testRecrutement/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","applyMiddleware","promise","increment","type","books","pa","initialState","filterBooks","isLoaded","error","counter","state","action","book","store","subscribe","console","log","getState","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAAQC,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,0BAApB,C,CACA;AACA;AAEA;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,SAAO;AACHC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGF,CAJF;;AAMA,MAAMC,KAAK,GAAG,MAAM;AAChB,SAAO;AACHD,IAAAA,IAAI,EAAE,WADH;AAEHE,IAAAA;AAFG,GAAP;AAIF,CALF;;AAOA,MAAMC,YAAY,GAAG;AACjBF,EAAAA,KAAK,EAAE,EADU;AAEjBG,EAAAA,WAAW,EAAE,EAFI;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AACnC,UAAQA,MAAM,CAACT,IAAf;AACK,SAAK,WAAL;AACI,aAAOQ,KAAK,GAAG,CAAf;;AAEL;AACI,aAAOA,KAAP;AALR;AAOH,CARD;;AAUA,MAAME,IAAI,GAAG,CAACF,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC3C,UAAQA,MAAM,CAACT,IAAf;AACI;AACI,aAAOQ,KAAP;AAFR;AAIH,CALD;;AAOA,MAAMG,KAAK,GAAGf,WAAW,CAACc,IAAD,EAAOb,eAAe,CAACC,OAAD,CAAtB,CAAzB;AAEAa,KAAK,CAACC,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAAtB;AAEAF,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,E,CACA;AACA;AACA;AACA;AACA;AACA;;AAEAtB,QAAQ,CAACuB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAvB,aAAa,CAACwB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux';\nimport promise from 'redux-promise-middleware';\n// let store = createStore();\n// const  = () => { \n    \n// }\n\nconst increment = () => { \n    return { \n        type: 'INCREMENT'\n     }\n };\n\nconst books = () => { \n    return { \n        type: 'INCREMENT',\n        pa\n     }\n };\n\nconst initialState = { \n    books: {},\n    filterBooks: {},\n    isLoaded: false,\n    error: false \n}\n\nconst counter = (state = 0, action) => { \n    switch (action.type) {\n         case \"INCREMENT\":\n             return state + 1;\n\n        default:\n            return state;\n    }\n}\n\nconst book = (state = initialState, action) => { \n    switch (action.type) {\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(book, applyMiddleware(promise));\n\nstore.subscribe(() => console.log(store.getState()));\n\nconsole.log(store.getState());\n// store.dispatch(increment());\n// store.dispatch(increment());\n// store.dispatch(increment());\n// store.dispatch(increment());              \n// store.dispatch(increment());\n// store.dispatch(increment());\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}